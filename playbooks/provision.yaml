- hosts: all
  tasks:
    - name: install apt packages
      apt:
        pkg={{ item }}
      with_items:
        - redis-server

    - name: install apt packages
      apt:
        pkg={{ item }}
        state=latest
      with_items:
        - git
        - python-virtualenv
        - python-dev
        - python-setuptools

    - name: install pip
      action: easy_install name=pip

    - name: create ssh dir
      file:
        path=/root/.ssh
        state=directory

    - name: install public deploy key
      copy:
        src=~/.ssh/deploy.pub
        dest=/root/.ssh/id_rsa.pub

    - name: install private deploy key
      copy:
        src=~/.ssh/deploy
        dest=/root/.ssh/id_rsa

    - name: install git.dolphm.com known host
      copy:
        src=files/known_hosts
        dest=/root/.ssh/known_hosts

    - name: create virtualenv
      pip:
        name={{ item }} state=latest
        virtualenv=/opt/gatewatch/venv
      with_items:
        - setuptools
        - pip

    - name: install pip packages into venv
      pip:
        name={{ item }} state=latest
        virtualenv=/opt/gatewatch/venv
        extra_args='--allow-external lazr.authentication --allow-unverified lazr.authentication'
      with_items:
        - 'git+ssh://dolph@git.dolphm.com/home/dolph/repos/gatewatch#egg=gatewatch'

    - name: create app config dir
      file:
        dest=/etc/gatewatch
        state=directory
        owner=www-data
        group=www-data
        mode=0700

    - name: deploy app config
      template:
        src=templates/config.py
        dest=/etc/gatewatch/gatewatch.conf.py
        owner=www-data
        group=www-data
        mode=0700

    - name: create app log dir
      file:
        dest=/var/log/gatewatch
        state=directory
        owner=www-data
        group=www-data
        mode=0700

    - name: create temp dir
      file:
        dest=/tmp/gatewatch
        state=directory
        owner=www-data
        group=www-data
        mode=0700

    - name: install apt packages
      apt:
        pkg={{ item }}
      with_items:
        - supervisor

    - name: install pip packages
      pip:
        name={{ item }} state=latest
        virtualenv=/opt/gatewatch/venv
      with_items:
        - celery

    - name: deploy celery config
      template:
        src=supervisor.celery.conf
        dest=/etc/supervisor/conf.d/celery.conf
      notify:
        - restart celery
        - restart celery-beat

    - name: ensure celery is started
      supervisorctl:
        name={{ item }}
        state=started
      with_items:
        - celery
        - celery-beat

    - name: install apt packages
      apt:
        pkg={{ item }}
      with_items:
        - gunicorn
        - supervisor

    - name: install pip packages
      pip:
        name={{ item }} state=latest
        virtualenv=/opt/gatewatch/venv/
      with_items:
        - gunicorn

    - name: deploy gunicorn config
      template:
        src=templates/supervisor.gunicorn.conf
        dest=/etc/supervisor/conf.d/gunicorn.conf
      notify:
        - restart gunicorn

    - name: ensure supervisor is running
      service:
        name=supervisor
        enabled=yes
        state=started

    - name: ensure gunicorn is started
      supervisorctl:
        name=gunicorn
        state=started

    - name: install apt packages
      apt:
        pkg=nginx

    - name: deploy nginx config
      template:
        src=templates/nginx.vhost
        dest=/etc/nginx/sites-enabled/default
      notify: restart nginx

    - name: ensure nginx is running
      service:
        name=nginx
        enabled=yes
        state=started

  handlers:
    - name: restart celery-beat
      supervisorctl:
        name=celery-beat
        state=restarted

    - name: restart celery
      supervisorctl:
        name=celery
        state=restarted

    - name: restart gunicorn
      supervisorctl:
        name=gunicorn
        state=restarted

    - name: restart nginx
      service:
        name=nginx
        state=reloaded
